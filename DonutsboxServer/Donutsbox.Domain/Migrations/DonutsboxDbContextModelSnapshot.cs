// <auto-generated />
using System;
using System.Collections.Generic;
using Donutsbox.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Donutsbox.Domain.Migrations
{
    [DbContext(typeof(DonutsboxDbContext))]
    partial class DonutsboxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Donutsbox.Domain.Entities.ContentPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("AudioURLs")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("audio_urls");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer")
                        .HasColumnName("comments_count");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("integer")
                        .HasColumnName("dislikes_count");

                    b.Property<int>("LikesCount")
                        .HasColumnType("integer")
                        .HasColumnName("likes_count");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid")
                        .HasColumnName("page_id");

                    b.PrimitiveCollection<List<string>>("PictureURLs")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("picture_urls");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.PrimitiveCollection<List<string>>("VideoURLs")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("video_urls");

                    b.HasKey("Id");

                    b.ToTable("content_post");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.CreatorPageData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("BannerURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("banner_url");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("page_name");

                    b.Property<int>("SubscribersCount")
                        .HasColumnType("integer")
                        .HasColumnName("subscribers_count");

                    b.HasKey("Id");

                    b.ToTable("creator_page_data");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("post_comment");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.PostReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<int>("ReactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("reaction_type_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("post_reaction");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.ReactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("reaction_type");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid")
                        .HasColumnName("page_id");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("picture_url");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("subscription");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("GUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserAuthId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("GUID");

                    b.HasIndex("UserAuthId")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth_email");

                    b.Property<DateTime?>("LastAuth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_auth");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.HasKey("Id");

                    b.ToTable("user_auth");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<string>("NotificationEmail")
                        .HasColumnType("text")
                        .HasColumnName("notification_email");

                    b.Property<string>("PaymentInfo")
                        .HasColumnType("text")
                        .HasColumnName("payment_info");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_data");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("begin_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("user_subscription");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("user_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Creator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.User", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.UserAuth", "UserAuth")
                        .WithOne("User")
                        .HasForeignKey("Donutsbox.Domain.Entities.User", "UserAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Donutsbox.Domain.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuth");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserData", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.User", "User")
                        .WithOne("UserData")
                        .HasForeignKey("Donutsbox.Domain.Entities.UserData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.User", b =>
                {
                    b.Navigation("UserData");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserAuth", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
