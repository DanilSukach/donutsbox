// <auto-generated />
using System;
using System.Collections.Generic;
using Donutsbox.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Donutsbox.Domain.Migrations
{
    [DbContext(typeof(DonutsboxDbContext))]
    partial class DonutsboxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Donutsbox.Domain.Entities.ContentPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PostId");

                    b.PrimitiveCollection<List<string>>("AudioURLs")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("AudioURLs");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("integer")
                        .HasColumnName("DislikesCount");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid")
                        .HasColumnName("PageId");

                    b.PrimitiveCollection<List<string>>("PictureURLs")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("PictureURLs");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Title");

                    b.PrimitiveCollection<List<string>>("VideoURLs")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("VideoURLs");

                    b.HasKey("PostId");

                    b.HasIndex("PageId");

                    b.ToTable("ContentPost");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.CreatorPageData", b =>
                {
                    b.Property<Guid>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PageId");

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AvatarURL");

                    b.Property<string>("BannerURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BannerURL");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uuid")
                        .HasColumnName("GUID");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("PageName");

                    b.Property<int>("SubscribersCount")
                        .HasColumnType("integer")
                        .HasColumnName("SubscribersCount");

                    b.HasKey("PageId");

                    b.HasIndex("GUID")
                        .IsUnique();

                    b.ToTable("CreatorPageData");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("SubscriptionId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("Name");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid")
                        .HasColumnName("PageId");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PictureURL");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Price");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("PageId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("GUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("GUID");

                    b.Property<Guid>("AuthId")
                        .HasColumnType("uuid")
                        .HasColumnName("AuthId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("Name");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("TypeId");

                    b.HasKey("GUID");

                    b.HasIndex("AuthId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AuthEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AuthEmail");

                    b.Property<DateTime>("LastAuth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastAuth");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("UsersAuth");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("GUID");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AvatarUrl");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("Description");

                    b.Property<string>("NotificationEmail")
                        .HasColumnType("text")
                        .HasColumnName("NotificationEmail");

                    b.Property<string>("PaymentInfo")
                        .HasColumnType("text")
                        .HasColumnName("PaymentInfo");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UsersData");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BeginDate");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("SubscriptionId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscription");
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Creator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.ContentPost", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.CreatorPageData", null)
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.CreatorPageData", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Donutsbox.Domain.Entities.CreatorPageData", "GUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.CreatorPageData", null)
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.User", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.UserAuth", null)
                        .WithOne()
                        .HasForeignKey("Donutsbox.Domain.Entities.User", "AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Donutsbox.Domain.Entities.UserType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserData", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Donutsbox.Domain.Entities.UserData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Donutsbox.Domain.Entities.UserSubscription", b =>
                {
                    b.HasOne("Donutsbox.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Donutsbox.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
